using System;

namespace Numbers
{
    /*
        В данном файле вместо методов класса Integers стоят заглушки, которые просто генерируют исключение NotImplementedException. 
        Необходимо реализовать данные методы.

        _Хозяйке на заметку_

        Как видите, ничего нигде не подчеркивается красным, и, если попробовать скомпилировать проект в текущем изначальном виде, никаких ошибок компиляции не будет. 
        Если же убрать генерацию исключений, появятся ошибки в стиле "метод ничего не возвращает". 

        Генерация исключения NotImplementedException в еще нереализованных кусках программы - это стандартный и "правильный" способ делать заглушки, оставляя реализацию "на потом".
        Например, если вы пишете прототип и сосредоточены на высокоуровневом алгоритме решения задачи, нежели на его непосредственной реализации.

        Вывод:
            * писать заглушки в стиле "вернуть хотя бы что-то лишь бы скомпилировалось" - не твой бро,
            * throw new NotImplementedException() - твой бро.

        Подумай, кстати, почему.
    */

    public static class Integers
    {
        /// <summary>
        /// Возвращает половину максимального числа типа int.
        /// </summary>
        internal static int HalfIntMaxValue()
        {
            /*
                После C++ вы будете приятно удивлены какое умное в .Net автодополнение (IntelliSense).
                По идее, если просто набрать return и нажать пробел, в появившемся списке автодополнения одной из первых будет нужная тебе константа :)
            */
            throw new NotImplementedException();
        }

        /// <summary>
        /// Возвращает куб заданного целого числа типа int.
        /// </summary>
        internal static int Cube(int x)
        {
            // не сомневайся, пиши. Тут без подвохов.
            throw new NotImplementedException();
        }

        /// <summary>
        /// Возвращает куб заданного целого числа типа int. Вычисление куба проводится в режиме проверки переполнения типа.
        /// </summary>
        internal static int CubeWithOverflowCheck(int x)
        {
            /*
                Тут придется погуглить, сорри.
                И заодно подумай какой режим выставлен по умолчанию. Почему. И почему категорически нельзя надеяться на режим по умолчанию.
            */
            throw new NotImplementedException();
        }

        /// <summary>
        /// Возвращает куб заданного целого числа типа int. Вычисление куба проводится в режиме игнорирования переполнения типа.
        /// </summary>
        internal static int CubeWithoutOverflowCheck(int x)
        {
            // если сделал остальные, то с этим уже тоже должно быть понятно.
            throw new NotImplementedException();
        }
    }
}
